from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
import asyncio

from app.core.deps import get_current_user, get_db
from app.schemas.booking import BookingCreate, BookingOut
from app.crud import booking as booking_crud
from app.models.user import User
from app.websockets.manager import manager

router = APIRouter(prefix="/bookings", tags=["Bookings"])

@router.post("/", response_model=BookingOut)
async def create_booking(
    booking: BookingCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    result = booking_crud.create_booking(db, booking, current_user.id)
    if result is None:
        raise HTTPException(status_code=400, detail="–í—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ")
    
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ WebSocket
    asyncio.create_task(
        manager.broadcast(
            f"üì¢ –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {current_user.email}: "
            f"—Ä–µ—Å—É—Ä—Å {booking.resource_id} —Å {booking.start_time} –ø–æ {booking.end_time}"
        )
    )
    return result

@router.get("/", response_model=list[BookingOut])
def list_bookings(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    return booking_crud.get_bookings(db)
